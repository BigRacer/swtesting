//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace ConsoleApplication1.testwebservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="testwebserviceSoap", Namespace="http://tempuri.org/")]
    public partial class testwebservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPatientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePatientOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public testwebservice() {
            this.Url = global::ConsoleApplication1.Properties.Settings.Default.ConsoleApplication1_testwebservice_testwebservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPatientsCompletedEventHandler GetPatientsCompleted;
        
        /// <remarks/>
        public event AddPatientCompletedEventHandler AddPatientCompleted;
        
        /// <remarks/>
        public event UpdatePatientCompletedEventHandler UpdatePatientCompleted;
        
        /// <remarks/>
        public event DeletePatientCompletedEventHandler DeletePatientCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Patient[] GetPatients() {
            object[] results = this.Invoke("GetPatients", new object[0]);
            return ((Patient[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientsAsync() {
            this.GetPatientsAsync(null);
        }
        
        /// <remarks/>
        public void GetPatientsAsync(object userState) {
            if ((this.GetPatientsOperationCompleted == null)) {
                this.GetPatientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientsOperationCompleted);
            }
            this.InvokeAsync("GetPatients", new object[0], this.GetPatientsOperationCompleted, userState);
        }
        
        private void OnGetPatientsOperationCompleted(object arg) {
            if ((this.GetPatientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientsCompleted(this, new GetPatientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPatient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddPatient(Patient p) {
            this.Invoke("AddPatient", new object[] {
                        p});
        }
        
        /// <remarks/>
        public void AddPatientAsync(Patient p) {
            this.AddPatientAsync(p, null);
        }
        
        /// <remarks/>
        public void AddPatientAsync(Patient p, object userState) {
            if ((this.AddPatientOperationCompleted == null)) {
                this.AddPatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPatientOperationCompleted);
            }
            this.InvokeAsync("AddPatient", new object[] {
                        p}, this.AddPatientOperationCompleted, userState);
        }
        
        private void OnAddPatientOperationCompleted(object arg) {
            if ((this.AddPatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePatient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePatient(Patient p) {
            this.Invoke("UpdatePatient", new object[] {
                        p});
        }
        
        /// <remarks/>
        public void UpdatePatientAsync(Patient p) {
            this.UpdatePatientAsync(p, null);
        }
        
        /// <remarks/>
        public void UpdatePatientAsync(Patient p, object userState) {
            if ((this.UpdatePatientOperationCompleted == null)) {
                this.UpdatePatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePatientOperationCompleted);
            }
            this.InvokeAsync("UpdatePatient", new object[] {
                        p}, this.UpdatePatientOperationCompleted, userState);
        }
        
        private void OnUpdatePatientOperationCompleted(object arg) {
            if ((this.UpdatePatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePatient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePatient(int id) {
            this.Invoke("DeletePatient", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void DeletePatientAsync(int id) {
            this.DeletePatientAsync(id, null);
        }
        
        /// <remarks/>
        public void DeletePatientAsync(int id, object userState) {
            if ((this.DeletePatientOperationCompleted == null)) {
                this.DeletePatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePatientOperationCompleted);
            }
            this.InvokeAsync("DeletePatient", new object[] {
                        id}, this.DeletePatientOperationCompleted, userState);
        }
        
        private void OnDeletePatientOperationCompleted(object arg) {
            if ((this.DeletePatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Patient {
        
        private int idField;
        
        private string nameField;
        
        private string surNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SurName {
            get {
                return this.surNameField;
            }
            set {
                this.surNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPatientsCompletedEventHandler(object sender, GetPatientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patient[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patient[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddPatientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePatientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeletePatientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591